#!/usr/bin/env python3


import logging
import logging.config
import os

from flask import Flask
from flask_bootstrap import Bootstrap5  # type: ignore[import-untyped]
from flask_migrate import Migrate  # type: ignore[import-untyped]
from flask_sqlalchemy import SQLAlchemy
from flask_wtf.csrf import CSRFProtect  # type: ignore[import-untyped]
from werkzeug.middleware.proxy_fix import ProxyFix

import website.web.filters as jinja_filters
from vulnerabilitylookup.default import get_config
from vulnerabilitylookup.vulnerabilitylookup import VulnerabilityLookup
from website import BASE_DIR
from website.web.helpers import sri_load

from .helpers import get_secret_key
from .helpers import get_security_password_salt


def set_logging(
    log_path: str = "",
    log_level: int = logging.INFO,
    modules: list[str] = [],
    log_format: str = "%(asctime)s %(name)s %(levelname)s %(message)s",
) -> None:
    if not modules:
        modules = ["root", "website"]
    if log_path:
        handler: logging.Handler = logging.FileHandler(log_path)
    else:
        handler = logging.StreamHandler()
    formater = logging.Formatter(log_format)
    handler.setFormatter(formater)
    for logger_name in modules:
        logger = logging.getLogger(logger_name)
        logger.addHandler(handler)
        for handler in logger.handlers:
            handler.setLevel(log_level)
        logger.setLevel(log_level)


application: Flask = Flask(__name__)
application.wsgi_app = ProxyFix(application.wsgi_app, x_for=1, x_proto=1, x_host=1, x_port=1, x_prefix=1)  # type: ignore

# Loads the appropriate configuration
TESTING = os.environ.get("TESTING", "")
if TESTING == "gh_action":
    # Testing on GitHub Actions
    application.config[
        "SQLALCHEMY_DATABASE_URI"
    ] = "postgresql://postgres:password@localhost:5432/vulnlookuptest"
elif TESTING.endswith(".py"):
    # Testing on a local machine with configuration from a Python config file.
    # if you launch the tests with pytest the environment variable 'TESTING' is already
    # set in pyproject.toml (tool.pytest.ini_options) to `website_test.py`.
    # so you can create a file config/website_test.py with your database configuration
    application.config.from_pyfile(
        os.path.join(BASE_DIR, "config", TESTING), silent=False
    )
    set_logging(
        application.config["LOG_PATH"], log_level=application.config["LOG_LEVEL"]
    )
else:
    # The production configuration file
    application.config.from_pyfile(
        os.path.join(BASE_DIR, "config", "website.py"), silent=False
    )
    set_logging(
        application.config["LOG_PATH"], log_level=application.config["LOG_LEVEL"]
    )

application.config["SECRET_KEY"] = get_secret_key()
application.config["SECURITY_PASSWORD_SALT"] = get_security_password_salt()
application.config["PUBLIC_DOMAIN"] = get_config("generic", "public_domain")

if application.config.get("DEBUG", False):
    application.debug = True

Bootstrap5(application)

# Database and migration
db = SQLAlchemy(application)
migrate = Migrate(application, db, directory="website/migrations")

# Enable CSRF protection globally
csrf = CSRFProtect(application)

vulnerabilitylookup: VulnerabilityLookup = VulnerabilityLookup()  # type: ignore[unused-ignore]


# ##### Global methods passed to Jinja


def get_sri(directory: str, filename: str) -> str:
    sha512 = sri_load()[directory][filename]
    return f"sha512-{sha512}"


application.jinja_env.globals.update(get_sri=get_sri)


# ##### Jinja custom filters

application.jinja_env.filters["str_to_obj"] = jinja_filters.str_to_obj
application.jinja_env.filters["datetimeformat"] = jinja_filters.datetimeformat
application.jinja_env.filters["string_to_datetime"] = jinja_filters.string_to_datetime
application.jinja_env.filters["markdown"] = jinja_filters.to_markdown
application.jinja_env.filters["hash"] = jinja_filters.hash
application.jinja_env.filters["cvss_base_score"] = jinja_filters.cvss_base_score
application.jinja_env.filters["cvss_severity"] = jinja_filters.cvss_severity
application.jinja_env.filters["cvss_clean_vector"] = jinja_filters.cvss_clean_vector
application.jinja_env.filters["update_query"] = jinja_filters.update_query_params
